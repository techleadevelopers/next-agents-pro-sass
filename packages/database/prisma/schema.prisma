generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id        String             @id @default(uuid())
  name      String
  type      String
  phone     String
  tenantId  String             // ‚Üê Obrigat√≥rio agora (multi-tenant)
  
  mensagens Mensagem[]         
  sessions  WhatsAppSession[]  
  settings  Settings?          @relation("AgentSettings")

  documentosTreinados DocumentoTreinado[]  // ‚Üê Vetores e Docs IA
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([tenantId])          // ‚Üê Performance para queries por tenant
}



model Mensagem {
  id        String   @id @default(uuid())
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id])
  content   String
  date      DateTime
  createdAt DateTime @default(now())
}

model KpiMetric {
  id             String   @id @default(uuid())
  date           DateTime
  taxaConversao  Float
  evolucao       Float[]  // Sparkline
  createdAt      DateTime @default(now())
}

model Template {
  id         String   @id @default(uuid())
  nome       String
  categoria  String
  vendidos   Int      @default(0)
  createdAt  DateTime @default(now())
}

model Cliente {
  id         String      @id @default(uuid())
  nome       String
  status     String      // ativo | cancelado
  pagamentos Pagamento[] // <- rela√ß√£o reversa
  assinaturas  Assinatura[]  // ‚Üê ADICIONAR ISSO
  createdAt  DateTime    @default(now())
}

model Pagamento {
  id         String   @id @default(uuid())
  valor      Float
  date       DateTime
  cliente    Cliente? @relation(fields: [clienteId], references: [id])
  clienteId  String?
  tenantId   String   // ‚Üê ESTA LINHA AQUI √â O QUE GERA O 'where: { tenantId }'
  createdAt  DateTime @default(now())
}

model Upsell {
  id         String   @id @default(uuid())
  produto    String
  valor      Float
  tenantId   String       // üëà Adiciona isso aqui
  createdAt  DateTime @default(now())
  @@index([tenantId])     // üëà Opcional, melhora performance multi-tenant
}

model Log {
  id        String   @id @default(uuid())
  agentId   String
  tipo      String   // mensagem | erro | evento
  sucesso   Boolean
  date      DateTime
  createdAt DateTime @default(now())
}

model WhatsAppSession {
  id             String   @id @default(uuid())
  agentId        String
  tenantId       String
  status         String   // INITIALIZING | WAITING_QR | CONNECTED | DISCONNECTED | ERROR
  qrCode         String?  // QR em base64 ou URL
  connectedAt    DateTime?
  disconnectedAt DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  agent Agent @relation(fields: [agentId], references: [id])

  @@index([agentId])
  @@index([tenantId])
}

model Settings {
  id              String   @id @default(uuid())
  agentId         String   @unique
  language        String   @default("pt-BR")
  promptBase      String
  fallbackMessage String

  tools           String[] 

  voiceGender     String?  
  voiceSpeed      Float?   
  voiceEnabled    Boolean? @default(false)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  agent           Agent    @relation("AgentSettings", fields: [agentId], references: [id], onDelete: Cascade)
}

model Faq {
  id        String   @id @default(uuid())
  pergunta  String
  resposta  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoTutorial {
  id        String   @id @default(uuid())
  titulo    String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plano {
  id          String   @id @default(uuid())
  nome        String
  preco       Float
  recursos    String[]  // ex: ["5 agentes", "chat ilimitado"]
  ativo       Boolean   @default(true)
  assinaturas  Assinatura[]   // ‚Üê ADICIONE ESTA LINHA
  createdAt   DateTime  @default(now())
}

model Assinatura {
  id         String   @id @default(uuid())
  clienteId  String
  cliente    Cliente  @relation(fields: [clienteId], references: [id]) // ‚úÖ Correto agora
  planoId    String
  plano      Plano    @relation(fields: [planoId], references: [id])   // ‚úÖ Correto agora
  status     String   // ativo, cancelado, trial
  dataInicio DateTime
  dataFim    DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model DocumentoTreinado {
  id        String   @id @default(uuid())
  agentId   String
  tenantId  String
  filename  String
  mimetype  String
  tamanho   Int
  origem    String   // "pdf" | "csv" | etc
  conteudo  String   // texto extra√≠do
  criadoEm  DateTime @default(now())

  agent     Agent    @relation(fields: [agentId], references: [id])
  vetores   VetorDocumento[]            // <- ADICIONE ESTA LINHA

  @@index([agentId])
  @@index([tenantId])
}


model VetorDocumento {
  id            String   @id @default(uuid())
  documentoId   String
  embedding     Bytes    // ou String[], depende do provider
  conteudoChunk String
  ordem         Int

  documento     DocumentoTreinado @relation(fields: [documentoId], references: [id])

  @@index([documentoId])
}

model FaturaMensal {
  id         String   @id @default(uuid())
  tenantId   String
  mesRef     String   // ex: "04/2025"
  valorTotal Float
  status     String   // "paga" | "pendente" | "vencida"
  dataVenc   DateTime
  createdAt  DateTime @default(now())
}

model KpiFinance {
  id         String   @id @default(uuid())
  tenantId   String
  mrr        Float
  churnRate  Float
  receitaHoje Float
  dataRef    DateTime
}
